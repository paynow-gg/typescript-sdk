"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTags = exports.getStore = exports.getProduct = exports.getProducts = exports.getNavlinks = exports.getCurrentCustomer = exports.postCheckoutSession = exports.postCartCheckoutSession = exports.putCartLine = exports.deleteCart = exports.getCart = exports.SaleDiscountType = exports.ProductSubscriptionIntervalScale = exports.ProductRemoveAfterIntervalScale = exports.CustomerProfilePlatform = exports.CustomerMinecraftPlatform = exports.CustomVariableType = void 0;
/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * PayNow Storefront (Headless) API
 * The Storefront API lets you integrate your store into custom front-ends or games. It manages product catalogue displaying, VAT rate calculation, carts, checkout sessions, and more. This API can be safely called directly from customer browsers or client-side applications without requiring an API key.
 * OpenAPI spec version: v1
 */
const axios_1 = __importDefault(require("axios"));
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomVariableType = {
    dropdown: 'dropdown',
    text: 'text',
    number: 'number',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerMinecraftPlatform = {
    unknown: 'unknown',
    java: 'java',
    bedrock: 'bedrock',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerProfilePlatform = {
    invalid: 'invalid',
    steam: 'steam',
    minecraft: 'minecraft',
    paynow_name: 'paynow_name',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductRemoveAfterIntervalScale = {
    invalid: 'invalid',
    day: 'day',
    week: 'week',
    month: 'month',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductSubscriptionIntervalScale = {
    invalid: 'invalid',
    day: 'day',
    week: 'week',
    month: 'month',
    year: 'year',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.SaleDiscountType = {
    percent: 'percent',
    amount: 'amount',
};
/**
 * Retrieves the current customer's shopping cart.
 * @summary Get cart
 */
const getCart = (params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/cart`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getCart = getCart;
/**
 * Clears all items from the customer's shopping cart.
 * @summary Clear cart
 */
const deleteCart = (options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/store/cart`, options);
};
exports.deleteCart = deleteCart;
/**
 * Adds a product to the cart or updates the quantity of an existing product.
When increment parameter is "true" or "1", the specified quantity will be added to any existing quantity.
Otherwise, the quantity will be set to the specified value, replacing any existing quantity.
 * @summary Add product to cart
 */
const putCartLine = (params, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/store/cart/lines`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.putCartLine = putCartLine;
/**
 * Creates a checkout session from the contents of the cart.
After creating the checkout session, redirect the customer to the `url` returned.
 * @summary Create a cart checkout session
 */
const postCartCheckoutSession = (createCartCheckoutSessionDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/store/cart/checkout`, createCartCheckoutSessionDto, options);
};
exports.postCartCheckoutSession = postCartCheckoutSession;
/**
 * Creates a checkout session using a Customer token.
After creating the checkout session, redirect the customer to the `url` returned.
 * @summary Create a checkout session
 */
const postCheckoutSession = (createCheckoutSessionRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/checkouts`, createCheckoutSessionRequestDto, options);
};
exports.postCheckoutSession = postCheckoutSession;
/**
 * Retrieves the current customer from the passed Customer token.
 * @summary Get current customer
 */
const getCurrentCustomer = (options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/customer`, options);
};
exports.getCurrentCustomer = getCurrentCustomer;
/**
 * Retrieves the store's navlink structure used for navigation.
 * @summary Get navlinks
 */
const getNavlinks = (options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/navlinks`, options);
};
exports.getNavlinks = getNavlinks;
/**
 * Retrieves the available products. To make sure all VAT rates are properly displayed, pass in the IP headers as instructed.
 * @summary Get products
 */
const getProducts = (params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/products`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getProducts = getProducts;
/**
 * Retrieves a product by an ID or a slug. To make sure all VAT rates are properly displayed, pass in the IP headers as instructed.
 * @summary Get product by ID or slug
 */
const getProduct = (idOrSlug, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/products/${idOrSlug}`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getProduct = getProduct;
/**
 * Retrieves a store by the passed in x-paynow-store-id or Customer token.
 * @summary Get current store
 */
const getStore = (options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store`, options);
};
exports.getStore = getStore;
/**
 * Retrieves the store's tags.
 * @summary Get tags
 */
const getTags = (options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/store/tags`, options);
};
exports.getTags = getTags;
//# sourceMappingURL=storefront.js.map