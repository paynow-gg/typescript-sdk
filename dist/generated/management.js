"use strict";
/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * PayNow Management API
 * The Management API provides tools for store administration, accessible by a store API key. It enables operations such as updating product prices, creating promotional coupons, managing customer inventories, and other backend store management functions.This API must be called from a secure server and requires proper authentication.
 * OpenAPI spec version: v1
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStoresCustomVariable = exports.getStoresCustomVariables = exports.postStoresCustomVariable = exports.deleteStoresCoupon = exports.patchStoresCoupon = exports.getStoresCoupon = exports.getStoresCoupons = exports.postStoresCoupon = exports.postStoresCheckout = exports.postStoresBanCheck = exports.deleteStoresBan = exports.patchStoresBan = exports.getStoresBan = exports.postStoresBan = exports.getStoresBans = exports.deleteStoresAffiliateLink = exports.patchStoresAffiliateLink = exports.getStoresAffiliateLink = exports.postStoresAffiliateLink = exports.getStoresAffiliateLinks = exports.WebhookType = exports.WebhookState = exports.WebhookEventType = exports.TrustStoreOnboardingStatus = exports.SubscriptionStatus = exports.RefundStatus = exports.QueuedDiscordActionStatus = exports.QueuedDiscordActionExecutionStatus = exports.ProductTaxCode = exports.ProductSubscriptionIntervalScale = exports.ProductStockTimeScale = exports.ProductRemoveAfterIntervalScale = exports.ProductCommandStage = exports.PaymentDeclineCode = exports.PayNowActorType = exports.OrderType = exports.OrderStatus = exports.DiscordActionType = exports.DiscordActionRevocationStage = exports.DiscordActionExecutionStage = exports.CustomerProfilePlatform = exports.CustomerMinecraftPlatform = exports.CustomVariableType = exports.CustomVariableOptionPriceType = exports.CouponDurationEnum = exports.CouponDiscountTypeEnum = exports.BanType = exports.AffiliateLinkRefererType = exports.AffiliateLinkDiscountType = exports.AffiliateLinkCommissionType = void 0;
exports.patchStoresProductPricingRegion = exports.getStoresProductPricingRegions = exports.postStoresProductSortOrder = exports.deleteStoresProduct = exports.patchStoresProduct = exports.getStoresProduct = exports.postStoresProduct = exports.getStoresProducts = exports.postStoresOrderRefund = exports.getStoresOrder = exports.getStoresOrders = exports.putStoresPurchaseFollowUpsConfiguration = exports.getStoresPurchaseFollowUpsConfiguration = exports.putStoresAbandonedCheckoutConfiguration = exports.getStoresAbandonedCheckoutConfiguration = exports.deleteStoresGlobalCommand = exports.patchStoresGlobalCommand = exports.postStoresGlobalCommand = exports.getStoresGlobalCommands = exports.deleteStoresProductDownloadableFile = exports.getStoresProductDownloadableFileDownloadUrl = exports.postStoresProductDownloadableFileUploadFinish = exports.postStoresProductDownloadableFiles = exports.getStoresProductDownloadableFiles = exports.getV1StoresStoreIdDiscordDiscordServerIdDiscordTextChannels = exports.getV1StoresStoreIdDiscordDiscordServerIdRoles = exports.deleteV1StoresStoreIdDiscordLinksToken = exports.getV1StoresStoreIdDiscordLinks = exports.postV1StoresStoreIdDiscordLinks = exports.deleteV1StoresStoreIdInventoryInventoryItemIdDiscordLink = exports.putV1StoresStoreIdInventoryInventoryItemIdDiscordLink = exports.getV1StoresStoreIdInventoryInventoryItemIdDiscordLink = exports.getV1StoresStoreIdInventoryInventoryItemIdDiscordQueued = exports.getV1StoresStoreIdOrdersOrderIdDiscordQueued = exports.getV1StoresStoreIdOrdersOrderIdDiscord = exports.putV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = exports.getV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = exports.postStoresDeliverableCommandsResend = exports.postStoresDataMigrationTebex = exports.getStoresDataMigrations = exports.postStoresCustomerBulk = exports.getStoresCustomerLookup = exports.deleteStoresCustomerToken = exports.postStoresCustomerToken = exports.patchStoresCustomer = exports.getStoresCustomer = exports.postStoresCustomer = exports.getStoresCustomers = exports.deleteStoresCustomVariable = exports.patchStoresCustomVariable = void 0;
exports.getStoresWebhookHistory = exports.deleteStoresWebhook = exports.patchStoresWebhook = exports.getStoresWebhookVariables = exports.postStoresWebhook = exports.getStoresWebhooks = exports.deleteStoresTagImage = exports.postStoresTagImageUploadFinish = exports.getStoresTagImageUploadUrl = exports.postStoresSubscriptionCancel = exports.getStoresSubscription = exports.getStoresSubscriptions = exports.getStoresStoreTrustOnboarding = exports.getStoresPricingRegionGroups = exports.patchStoresPricingRegion = exports.getStoresPricingRegions = void 0;
const axios_1 = __importDefault(require("axios"));
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkCommissionType = {
    none: "none",
    fixed: "fixed",
    percentage: "percentage",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkDiscountType = {
    none: "none",
    fixed: "fixed",
    percentage: "percentage",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkRefererType = {
    invalid: "invalid",
    first_referer: "first_referer",
    last_referer: "last_referer",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.BanType = {
    unknown: "unknown",
    steam: "steam",
    ip: "ip",
    customer: "customer",
    customer_name: "customer_name",
    email: "email",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CouponDiscountTypeEnum = {
    unspecified: "unspecified",
    percent: "percent",
    amount: "amount",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CouponDurationEnum = {
    once: "once",
    forever: "forever",
    repeating: "repeating",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomVariableOptionPriceType = {
    fixed: "fixed",
    percentage: "percentage",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomVariableType = {
    dropdown: "dropdown",
    text: "text",
    number: "number",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerMinecraftPlatform = {
    unknown: "unknown",
    java: "java",
    bedrock: "bedrock",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerProfilePlatform = {
    invalid: "invalid",
    steam: "steam",
    minecraft: "minecraft",
    paynow_name: "paynow_name",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionExecutionStage = {
    on_purchase: "on_purchase",
    on_expire: "on_expire",
    on_refund: "on_refund",
    on_chargeback: "on_chargeback",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionRevocationStage = {
    on_expire: "on_expire",
    on_refund: "on_refund",
    on_chargeback: "on_chargeback",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionType = {
    persist_role: "persist_role",
    send_message: "send_message",
    ban_user: "ban_user",
    kick_user: "kick_user",
    generate_invite_link: "generate_invite_link",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.OrderStatus = {
    created: "created",
    completed: "completed",
    canceled: "canceled",
    refunded: "refunded",
    chargeback: "chargeback",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.OrderType = {
    one_time: "one_time",
    subscription: "subscription",
    mixed: "mixed",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.PayNowActorType = {
    anonymous: "anonymous",
    user: "user",
    customer: "customer",
    api_key: "api_key",
    game_server: "game_server",
    admin: "admin",
    internal: "internal",
    platform: "platform",
    global_customer: "global_customer",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.PaymentDeclineCode = {
    unknown: "unknown",
    generic_decline: "generic_decline",
    call_issuer: "call_issuer",
    authentication_required: "authentication_required",
    currency_not_supported: "currency_not_supported",
    duplicate_transaction: "duplicate_transaction",
    expired_card: "expired_card",
    fraudulent: "fraudulent",
    incorrect_number: "incorrect_number",
    incorrect_cvc: "incorrect_cvc",
    incorrect_pin: "incorrect_pin",
    incorrect_zip: "incorrect_zip",
    insufficient_funds: "insufficient_funds",
    invalid_account: "invalid_account",
    invalid_amount: "invalid_amount",
    invalid_expiry_month: "invalid_expiry_month",
    invalid_expiry_year: "invalid_expiry_year",
    issuer_not_available: "issuer_not_available",
    lost_card: "lost_card",
    merchant_blacklist: "merchant_blacklist",
    new_account_information_available: "new_account_information_available",
    no_action_taken: "no_action_taken",
    pickup_card: "pickup_card",
    pin_try_exceeded: "pin_try_exceeded",
    restricted_card: "restricted_card",
    stolen_card: "stolen_card",
    testmode_decline: "testmode_decline",
    try_again_later: "try_again_later",
    security_violation: "security_violation",
    card_velocity_exceeded: "card_velocity_exceeded",
    do_not_honor: "do_not_honor",
    processing_error: "processing_error",
    card_not_supported: "card_not_supported",
    transaction_not_allowed: "transaction_not_allowed",
    authorization_revoked: "authorization_revoked",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductCommandStage = {
    invalid: "invalid",
    on_purchase: "on_purchase",
    on_expire: "on_expire",
    on_refund: "on_refund",
    on_renew: "on_renew",
    on_chargeback: "on_chargeback",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductRemoveAfterIntervalScale = {
    invalid: "invalid",
    day: "day",
    week: "week",
    month: "month",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductStockTimeScale = {
    invalid: "invalid",
    day: "day",
    week: "week",
    month: "month",
    year: "year",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductSubscriptionIntervalScale = {
    invalid: "invalid",
    day: "day",
    week: "week",
    month: "month",
    year: "year",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductTaxCode = {
    unknown: "unknown",
    digital_goods_subscription: "digital_goods_subscription",
    digital_goods_permanent: "digital_goods_permanent",
    saas: "saas",
    downloaded_software: "downloaded_software",
    digital_goods_subscription_gaming: "digital_goods_subscription_gaming",
    digital_goods_permanent_gaming: "digital_goods_permanent_gaming",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.QueuedDiscordActionExecutionStatus = {
    success: "success",
    failure: "failure",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.QueuedDiscordActionStatus = {
    active: "active",
    complete: "complete",
    errored: "errored",
    canceled: "canceled",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.RefundStatus = {
    created: "created",
    approved: "approved",
    processing: "processing",
    completed: "completed",
    canceled: "canceled",
    failed: "failed",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.SubscriptionStatus = {
    created: "created",
    active: "active",
    canceled: "canceled",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.TrustStoreOnboardingStatus = {
    invalid: "invalid",
    pending: "pending",
    approved: "approved",
    declined: "declined",
    requires_action: "requires_action",
    under_review: "under_review",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookEventType = {
    on_ignore: "on_ignore",
    on_order_completed: "on_order_completed",
    on_refund: "on_refund",
    on_chargeback: "on_chargeback",
    on_delivery_item_added: "on_delivery_item_added",
    on_delivery_item_activated: "on_delivery_item_activated",
    on_delivery_item_used: "on_delivery_item_used",
    on_delivery_item_revoked: "on_delivery_item_revoked",
    on_subscription_activated: "on_subscription_activated",
    on_subscription_renewed: "on_subscription_renewed",
    on_subscription_canceled: "on_subscription_canceled",
    on_discord_order_actions_queued: "on_discord_order_actions_queued",
    on_connected_user_registered: "on_connected_user_registered",
    on_connected_user_became_payable: "on_connected_user_became_payable",
    on_connected_user_payout_created: "on_connected_user_payout_created",
    on_connected_user_payout_completed: "on_connected_user_payout_completed",
    on_connected_user_transaction_inserted: "on_connected_user_transaction_inserted",
    on_connected_user_became_unpayable: "on_connected_user_became_unpayable",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookState = {
    success: "success",
    pending: "pending",
    failed: "failed",
    all: "all",
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookType = {
    json_v1: "json_v1",
    discord_v1: "discord_v1",
};
const getStoresAffiliateLinks = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links`, options);
};
exports.getStoresAffiliateLinks = getStoresAffiliateLinks;
const postStoresAffiliateLink = (storeId, createAffiliateLinkDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links`, createAffiliateLinkDto, options);
};
exports.postStoresAffiliateLink = postStoresAffiliateLink;
const getStoresAffiliateLink = (storeId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, options);
};
exports.getStoresAffiliateLink = getStoresAffiliateLink;
const patchStoresAffiliateLink = (storeId, id, updateAffiliateLinkDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, updateAffiliateLinkDto, options);
};
exports.patchStoresAffiliateLink = patchStoresAffiliateLink;
const deleteStoresAffiliateLink = (storeId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, options);
};
exports.deleteStoresAffiliateLink = deleteStoresAffiliateLink;
const getStoresBans = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/bans`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresBans = getStoresBans;
const postStoresBan = (storeId, upsertBanRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/bans`, upsertBanRequestDto, options);
};
exports.postStoresBan = postStoresBan;
const getStoresBan = (storeId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, options);
};
exports.getStoresBan = getStoresBan;
const patchStoresBan = (storeId, id, upsertBanRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, upsertBanRequestDto, options);
};
exports.patchStoresBan = patchStoresBan;
const deleteStoresBan = (storeId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, options);
};
exports.deleteStoresBan = deleteStoresBan;
const postStoresBanCheck = (storeId, checkForBanIDByIdentitiesRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/bans/check`, checkForBanIDByIdentitiesRequestDto, options);
};
exports.postStoresBanCheck = postStoresBanCheck;
/**
 * Creates a checkout session from a secure server using an API Key.
If you have a Customer token, see the Storefront API Create Checkout endpoint.
 * @summary Create a checkout session
 */
const postStoresCheckout = (storeId, createCheckoutSessionManagementDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/checkouts`, createCheckoutSessionManagementDto, options);
};
exports.postStoresCheckout = postStoresCheckout;
const postStoresCoupon = (storeId, couponDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/coupons`, couponDto, options);
};
exports.postStoresCoupon = postStoresCoupon;
/**
 * @summary Fetches all coupons for a store id
 */
const getStoresCoupons = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/coupons`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresCoupons = getStoresCoupons;
/**
 * @summary Retrieves a coupon by ID
 */
const getStoresCoupon = (storeId, couponId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, options);
};
exports.getStoresCoupon = getStoresCoupon;
/**
 * @summary Performs a Delta Update of a Coupon
 */
const patchStoresCoupon = (storeId, couponId, couponDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, couponDto, options);
};
exports.patchStoresCoupon = patchStoresCoupon;
/**
 * @summary Deletes a coupon
 */
const deleteStoresCoupon = (storeId, couponId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, options);
};
exports.deleteStoresCoupon = deleteStoresCoupon;
/**
 * Creates a new custom variable for the specified store.
Custom variables allow customers to provide additional input when purchasing products.
 * @summary Create custom variable
 */
const postStoresCustomVariable = (storeId, upsertCustomVariableRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables`, upsertCustomVariableRequestDto, options);
};
exports.postStoresCustomVariable = postStoresCustomVariable;
/**
 * Retrieves all custom variables for the specified store.
 * @summary Get custom variables
 */
const getStoresCustomVariables = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables`, options);
};
exports.getStoresCustomVariables = getStoresCustomVariables;
/**
 * Retrieves a specific custom variable by ID from the specified store.
 * @summary Get custom variable
 */
const getStoresCustomVariable = (storeId, customVariableId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, options);
};
exports.getStoresCustomVariable = getStoresCustomVariable;
/**
 * Performs a partial update of a custom variable using field mask.
Only the fields specified in the request will be updated.
 * @summary Update custom variable
 */
const patchStoresCustomVariable = (storeId, customVariableId, upsertCustomVariableRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, upsertCustomVariableRequestDto, options);
};
exports.patchStoresCustomVariable = patchStoresCustomVariable;
/**
 * Deletes a custom variable from the specified store.
This will also delete all associated options and cannot be undone.
 * @summary Delete custom variable
 */
const deleteStoresCustomVariable = (storeId, customVariableId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, options);
};
exports.deleteStoresCustomVariable = deleteStoresCustomVariable;
/**
 * Retrieves all customers for the specified store.
 * @summary Get customers
 */
const getStoresCustomers = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresCustomers = getStoresCustomers;
/**
 * Creates a new customer based on the fields passed.
 * @summary Create customer
 */
const postStoresCustomer = (storeId, upsertCustomerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers`, upsertCustomerRequestDto, options);
};
exports.postStoresCustomer = postStoresCustomer;
/**
 * Retrieves a customer by the ID for the specified store.
 * @summary Get customer by ID
 */
const getStoresCustomer = (storeId, customerId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}`, options);
};
exports.getStoresCustomer = getStoresCustomer;
/**
 * Updates an existing customer based on the fields passed.
 * @summary Update customer
 */
const patchStoresCustomer = (storeId, customerId, upsertCustomerRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}`, upsertCustomerRequestDto, options);
};
exports.patchStoresCustomer = patchStoresCustomer;
/**
 * Generates a customer token that can be used by the Storefront (Headless) API.
 * @summary Create customer token
 */
const postStoresCustomerToken = (storeId, customerId, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}/tokens`, undefined, options);
};
exports.postStoresCustomerToken = postStoresCustomerToken;
/**
 * Invalidates all generated customer tokens.
 * @summary Invalidate customer tokens
 */
const deleteStoresCustomerToken = (storeId, customerId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}/tokens`, options);
};
exports.deleteStoresCustomerToken = deleteStoresCustomerToken;
/**
 * Looks up a customer by an external platform ID.
 * @summary Lookup customer
 */
const getStoresCustomerLookup = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers/lookup`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresCustomerLookup = getStoresCustomerLookup;
/**
 * Creates up to 200 customers at once.
 * @summary Bulk create customers
 */
const postStoresCustomerBulk = (storeId, upsertCustomerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers/bulk`, upsertCustomerRequestDto, options);
};
exports.postStoresCustomerBulk = postStoresCustomerBulk;
const getStoresDataMigrations = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/data-migrations`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresDataMigrations = getStoresDataMigrations;
const postStoresDataMigrationTebex = (storeId, startDataMigrationFromTebexRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/data-migrations/tebex`, startDataMigrationFromTebexRequestDto, options);
};
exports.postStoresDataMigrationTebex = postStoresDataMigrationTebex;
const postStoresDeliverableCommandsResend = (storeId, deliverableId, resendCommandsForGameServerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/deliverables/${deliverableId}/commands/resend`, resendCommandsForGameServerRequestDto, options);
};
exports.postStoresDeliverableCommandsResend = postStoresDeliverableCommandsResend;
const getV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = (storeId, productVersionId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/product_versions/${productVersionId}/discord_actions`, options);
};
exports.getV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = getV1StoresStoreIdProductVersionsProductVersionIdDiscordActions;
const putV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = (storeId, productVersionId, setDiscordActionDto, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/product_versions/${productVersionId}/discord_actions`, setDiscordActionDto, options);
};
exports.putV1StoresStoreIdProductVersionsProductVersionIdDiscordActions = putV1StoresStoreIdProductVersionsProductVersionIdDiscordActions;
const getV1StoresStoreIdOrdersOrderIdDiscord = (storeId, orderId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}/discord`, options);
};
exports.getV1StoresStoreIdOrdersOrderIdDiscord = getV1StoresStoreIdOrdersOrderIdDiscord;
const getV1StoresStoreIdOrdersOrderIdDiscordQueued = (storeId, orderId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}/discord/queued`, options);
};
exports.getV1StoresStoreIdOrdersOrderIdDiscordQueued = getV1StoresStoreIdOrdersOrderIdDiscordQueued;
const getV1StoresStoreIdInventoryInventoryItemIdDiscordQueued = (storeId, inventoryItemId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/inventory/${inventoryItemId}/discord/queued`, options);
};
exports.getV1StoresStoreIdInventoryInventoryItemIdDiscordQueued = getV1StoresStoreIdInventoryInventoryItemIdDiscordQueued;
const getV1StoresStoreIdInventoryInventoryItemIdDiscordLink = (storeId, inventoryItemId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/inventory/${inventoryItemId}/discord/link`, options);
};
exports.getV1StoresStoreIdInventoryInventoryItemIdDiscordLink = getV1StoresStoreIdInventoryInventoryItemIdDiscordLink;
const putV1StoresStoreIdInventoryInventoryItemIdDiscordLink = (storeId, inventoryItemId, params, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/inventory/${inventoryItemId}/discord/link`, undefined, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.putV1StoresStoreIdInventoryInventoryItemIdDiscordLink = putV1StoresStoreIdInventoryInventoryItemIdDiscordLink;
const deleteV1StoresStoreIdInventoryInventoryItemIdDiscordLink = (storeId, inventoryItemId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/inventory/${inventoryItemId}/discord/link`, options);
};
exports.deleteV1StoresStoreIdInventoryInventoryItemIdDiscordLink = deleteV1StoresStoreIdInventoryInventoryItemIdDiscordLink;
const postV1StoresStoreIdDiscordLinks = (storeId, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/discord/links`, undefined, options);
};
exports.postV1StoresStoreIdDiscordLinks = postV1StoresStoreIdDiscordLinks;
const getV1StoresStoreIdDiscordLinks = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/discord/links`, options);
};
exports.getV1StoresStoreIdDiscordLinks = getV1StoresStoreIdDiscordLinks;
const deleteV1StoresStoreIdDiscordLinksToken = (storeId, token, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/discord/links/${token}`, options);
};
exports.deleteV1StoresStoreIdDiscordLinksToken = deleteV1StoresStoreIdDiscordLinksToken;
const getV1StoresStoreIdDiscordDiscordServerIdRoles = (storeId, discordServerId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/discord/${discordServerId}/roles`, options);
};
exports.getV1StoresStoreIdDiscordDiscordServerIdRoles = getV1StoresStoreIdDiscordDiscordServerIdRoles;
const getV1StoresStoreIdDiscordDiscordServerIdDiscordTextChannels = (storeId, discordServerId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/discord/${discordServerId}/discord/text_channels`, options);
};
exports.getV1StoresStoreIdDiscordDiscordServerIdDiscordTextChannels = getV1StoresStoreIdDiscordDiscordServerIdDiscordTextChannels;
const getStoresProductDownloadableFiles = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files`, options);
};
exports.getStoresProductDownloadableFiles = getStoresProductDownloadableFiles;
const postStoresProductDownloadableFiles = (storeId, productId, startDownloadableFileUploadRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files`, startDownloadableFileUploadRequestDto, options);
};
exports.postStoresProductDownloadableFiles = postStoresProductDownloadableFiles;
const postStoresProductDownloadableFileUploadFinish = (storeId, productId, id, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}/finish`, undefined, options);
};
exports.postStoresProductDownloadableFileUploadFinish = postStoresProductDownloadableFileUploadFinish;
const getStoresProductDownloadableFileDownloadUrl = (storeId, productId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}/download-url`, options);
};
exports.getStoresProductDownloadableFileDownloadUrl = getStoresProductDownloadableFileDownloadUrl;
const deleteStoresProductDownloadableFile = (storeId, productId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}`, options);
};
exports.deleteStoresProductDownloadableFile = deleteStoresProductDownloadableFile;
/**
 * Retrieves all global commands for the specified store.
 * @summary Get global commands
 */
const getStoresGlobalCommands = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/global-commands`, options);
};
exports.getStoresGlobalCommands = getStoresGlobalCommands;
/**
 * Creates a global command for a store.
 * @summary Create global command
 */
const postStoresGlobalCommand = (storeId, upsertGlobalCommandDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/global-commands`, upsertGlobalCommandDto, options);
};
exports.postStoresGlobalCommand = postStoresGlobalCommand;
/**
 * Updates a global command for a store.
 * @summary Update global command
 */
const patchStoresGlobalCommand = (storeId, globalCommandId, upsertGlobalCommandDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/global-commands/${globalCommandId}`, upsertGlobalCommandDto, options);
};
exports.patchStoresGlobalCommand = patchStoresGlobalCommand;
/**
 * Deletes a global command for a store.
 * @summary Delete global command
 */
const deleteStoresGlobalCommand = (storeId, globalCommandId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/global-commands/${globalCommandId}`, options);
};
exports.deleteStoresGlobalCommand = deleteStoresGlobalCommand;
/**
 * @summary Gets the abandoned checkout behaviour for a store
 */
const getStoresAbandonedCheckoutConfiguration = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/marketing/abandoned-checkouts/configuration`, options);
};
exports.getStoresAbandonedCheckoutConfiguration = getStoresAbandonedCheckoutConfiguration;
/**
 * @summary Sets the abandoned checkout behaviour for a store
 */
const putStoresAbandonedCheckoutConfiguration = (storeId, abandonedCheckoutStoreConfigurationUpdateDto, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/marketing/abandoned-checkouts/configuration`, abandonedCheckoutStoreConfigurationUpdateDto, options);
};
exports.putStoresAbandonedCheckoutConfiguration = putStoresAbandonedCheckoutConfiguration;
/**
 * @summary Gets the purchase follow up behaviour for a store
 */
const getStoresPurchaseFollowUpsConfiguration = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/marketing/purchase-follow-ups/configuration`, options);
};
exports.getStoresPurchaseFollowUpsConfiguration = getStoresPurchaseFollowUpsConfiguration;
/**
 * @summary Sets the purchase follow up behaviour for a store
 */
const putStoresPurchaseFollowUpsConfiguration = (storeId, purchaseFollowUpStoreConfigurationUpdateDto, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/marketing/purchase-follow-ups/configuration`, purchaseFollowUpStoreConfigurationUpdateDto, options);
};
exports.putStoresPurchaseFollowUpsConfiguration = putStoresPurchaseFollowUpsConfiguration;
/**
 * Retrieves all orders for the specified store.
 * @summary Get orders
 */
const getStoresOrders = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresOrders = getStoresOrders;
/**
 * Retrieves an order by the ID for the specified store.
 * @summary Get order by ID
 */
const getStoresOrder = (storeId, orderId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}`, options);
};
exports.getStoresOrder = getStoresOrder;
/**
 * Creates a refund for an order by the ID for the specified store.
 * @summary Refund order by ID
 */
const postStoresOrderRefund = (storeId, orderId, createRefundRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}/refund`, createRefundRequestDto, options);
};
exports.postStoresOrderRefund = postStoresOrderRefund;
/**
 * Retrieves all products for the specified store.
DO NOT USE THIS ROUTE FOR DISPLAYING PRODUCTS ON YOUR STOREFRONT, use the storefront API instead.
 * @summary Get products
 */
const getStoresProducts = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products`, options);
};
exports.getStoresProducts = getStoresProducts;
/**
 * Creates a new product in the specified store.
Creating dynamic products while creating a checkout session via this endpoint without prior approval is prohibited and will result in store deactivation per our User Agreement.
 * @summary Create product
 */
const postStoresProduct = (storeId, upsertProductRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products`, upsertProductRequestDto, options);
};
exports.postStoresProduct = postStoresProduct;
/**
 * Retrieves a specific product by ID from the specified store.
DO NOT USE THIS ROUTE FOR DISPLAYING PRODUCTS ON YOUR STOREFRONT, use the storefront API instead.
 * @summary Get product
 */
const getStoresProduct = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, options);
};
exports.getStoresProduct = getStoresProduct;
/**
 * Updates an existing product in the specified store.
 * @summary Update product
 */
const patchStoresProduct = (storeId, productId, upsertProductRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, upsertProductRequestDto, options);
};
exports.patchStoresProduct = patchStoresProduct;
/**
 * Deletes a product from the specified store.
 * @summary Delete product
 */
const deleteStoresProduct = (storeId, productId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, options);
};
exports.deleteStoresProduct = deleteStoresProduct;
/**
 * Updates the sort order of products in the specified store.
 * @summary Update product sort order
 */
const postStoresProductSortOrder = (storeId, updateProductSortOrderRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/sort-order`, updateProductSortOrderRequestDto, options);
};
exports.postStoresProductSortOrder = postStoresProductSortOrder;
const getStoresProductPricingRegions = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/pricing/regions`, options);
};
exports.getStoresProductPricingRegions = getStoresProductPricingRegions;
const patchStoresProductPricingRegion = (storeId, productId, regionId, productPricingRegionOverrideDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/pricing/regions/${regionId}`, productPricingRegionOverrideDto, options);
};
exports.patchStoresProductPricingRegion = patchStoresProductPricingRegion;
const getStoresPricingRegions = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/regions`, options);
};
exports.getStoresPricingRegions = getStoresPricingRegions;
const patchStoresPricingRegion = (storeId, regionId, storePricingRegionOverrideDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/regions/${regionId}`, storePricingRegionOverrideDto, options);
};
exports.patchStoresPricingRegion = patchStoresPricingRegion;
const getStoresPricingRegionGroups = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/region-groups`, options);
};
exports.getStoresPricingRegionGroups = getStoresPricingRegionGroups;
const getStoresStoreTrustOnboarding = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/trust/onboarding/status`, options);
};
exports.getStoresStoreTrustOnboarding = getStoresStoreTrustOnboarding;
/**
 * Retrieves all subscriptions for the specified store.
 * @summary Get subscriptions
 */
const getStoresSubscriptions = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresSubscriptions = getStoresSubscriptions;
/**
 * Retrieves a subscription for the specified store by the supplied ID.
 * @summary Get subscription by ID
 */
const getStoresSubscription = (storeId, subscriptionId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions/${subscriptionId}`, options);
};
exports.getStoresSubscription = getStoresSubscription;
/**
 * Cancels a subscription for the specified store by the supplied ID.
 * @summary Cancel subscription by ID
 */
const postStoresSubscriptionCancel = (storeId, subscriptionId, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions/${subscriptionId}/cancel`, undefined, options);
};
exports.postStoresSubscriptionCancel = postStoresSubscriptionCancel;
/**
 * Retrieves an image upload URL for a tag.
 * @summary Get tag image upload URL
 */
const getStoresTagImageUploadUrl = (storeId, tagId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image-upload-url`, options);
};
exports.getStoresTagImageUploadUrl = getStoresTagImageUploadUrl;
/**
 * Finishes an image upload for a tag.
 * @summary Finish tag image upload URL
 */
const postStoresTagImageUploadFinish = (storeId, tagId, finishTagImageUploadUrlRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image-upload-finish`, finishTagImageUploadUrlRequestDto, options);
};
exports.postStoresTagImageUploadFinish = postStoresTagImageUploadFinish;
/**
 * Deletes an image for a tag.
 * @summary Delete tag image URL
 */
const deleteStoresTagImage = (storeId, tagId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image`, options);
};
exports.deleteStoresTagImage = deleteStoresTagImage;
const getStoresWebhooks = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks`, options);
};
exports.getStoresWebhooks = getStoresWebhooks;
const postStoresWebhook = (storeId, createWebhookDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/webhooks`, createWebhookDto, options);
};
exports.postStoresWebhook = postStoresWebhook;
const getStoresWebhookVariables = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/variables`, options);
};
exports.getStoresWebhookVariables = getStoresWebhookVariables;
const patchStoresWebhook = (storeId, webhookId, updateWebhookDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}`, updateWebhookDto, options);
};
exports.patchStoresWebhook = patchStoresWebhook;
const deleteStoresWebhook = (storeId, webhookId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}`, options);
};
exports.deleteStoresWebhook = deleteStoresWebhook;
const getStoresWebhookHistory = (storeId, webhookId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}/history`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getStoresWebhookHistory = getStoresWebhookHistory;
//# sourceMappingURL=management.js.map