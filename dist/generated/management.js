"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomVariable = exports.getCustomVariables = exports.postCustomVariable = exports.deleteCoupon = exports.patchCoupon = exports.getCoupon = exports.getCoupons = exports.postCoupon = exports.postCheckout = exports.postBanCheck = exports.deleteBan = exports.patchBan = exports.getBan = exports.postBan = exports.getBans = exports.deleteAffiliateLink = exports.patchAffiliateLink = exports.getAffiliateLink = exports.postAffiliateLink = exports.getAffiliateLinks = exports.WebhookType = exports.WebhookState = exports.WebhookEventType = exports.TrustStoreOnboardingStatus = exports.SubscriptionStatus = exports.RefundStatus = exports.QueuedDiscordActionStatus = exports.QueuedDiscordActionExecutionStatus = exports.ProductTaxCode = exports.ProductSubscriptionIntervalScale = exports.ProductStockTimeScale = exports.ProductRemoveAfterIntervalScale = exports.ProductCommandStage = exports.PaymentDeclineCode = exports.PayNowActorType = exports.OrderType = exports.OrderStatus = exports.DiscordActionType = exports.DiscordActionRevocationStage = exports.DiscordActionExecutionStage = exports.CustomerProfilePlatform = exports.CustomerMinecraftPlatform = exports.CustomVariableType = exports.CustomVariableOptionPriceType = exports.CouponDurationEnum = exports.CouponDiscountTypeEnum = exports.BanType = exports.AffiliateLinkRefererType = exports.AffiliateLinkDiscountType = exports.AffiliateLinkCommissionType = void 0;
exports.getWebhookVariables = exports.postWebhook = exports.getWebhooks = exports.deleteTagImage = exports.postTagImageUploadFinish = exports.getTagImageUploadUrl = exports.postSubscriptionCancel = exports.getSubscription = exports.getSubscriptions = exports.getStoreTrustOnboarding = exports.getPricingRegionGroups = exports.patchPricingRegion = exports.getPricingRegions = exports.patchProductPricingRegion = exports.getProductPricingRegions = exports.postProductSortOrder = exports.deleteProduct = exports.patchProduct = exports.getProduct = exports.postProduct = exports.getProducts = exports.postOrderRefund = exports.getOrder = exports.getOrders = exports.putPurchaseFollowUpsConfiguration = exports.getPurchaseFollowUpsConfiguration = exports.putAbandonedCheckoutConfiguration = exports.getAbandonedCheckoutConfiguration = exports.deleteGlobalCommand = exports.patchGlobalCommand = exports.postGlobalCommand = exports.getGlobalCommands = exports.deleteProductDownloadableFile = exports.getProductDownloadableFileDownloadUrl = exports.postProductDownloadableFileUploadFinish = exports.postProductDownloadableFiles = exports.getProductDownloadableFiles = exports.postDeliverableCommandsResend = exports.postDataMigrationTebex = exports.getDataMigrations = exports.postCustomerBulk = exports.getCustomerLookup = exports.deleteCustomerToken = exports.postCustomerToken = exports.patchCustomer = exports.getCustomer = exports.postCustomer = exports.getCustomers = exports.deleteCustomVariable = exports.patchCustomVariable = void 0;
exports.getWebhookHistory = exports.deleteWebhook = exports.patchWebhook = void 0;
/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * PayNow Management API
 * The Management API provides tools for store administration, accessible by a store API key. It enables operations such as updating product prices, creating promotional coupons, managing customer inventories, and other backend store management functions.This API must be called from a secure server and requires proper authentication.
 * OpenAPI spec version: v1
 */
const axios_1 = __importDefault(require("axios"));
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkCommissionType = {
    none: 'none',
    fixed: 'fixed',
    percentage: 'percentage',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkDiscountType = {
    none: 'none',
    fixed: 'fixed',
    percentage: 'percentage',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.AffiliateLinkRefererType = {
    invalid: 'invalid',
    first_referer: 'first_referer',
    last_referer: 'last_referer',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.BanType = {
    unknown: 'unknown',
    steam: 'steam',
    ip: 'ip',
    customer: 'customer',
    customer_name: 'customer_name',
    email: 'email',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CouponDiscountTypeEnum = {
    unspecified: 'unspecified',
    percent: 'percent',
    amount: 'amount',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CouponDurationEnum = {
    once: 'once',
    forever: 'forever',
    repeating: 'repeating',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomVariableOptionPriceType = {
    fixed: 'fixed',
    percentage: 'percentage',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomVariableType = {
    dropdown: 'dropdown',
    text: 'text',
    number: 'number',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerMinecraftPlatform = {
    unknown: 'unknown',
    java: 'java',
    bedrock: 'bedrock',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.CustomerProfilePlatform = {
    invalid: 'invalid',
    steam: 'steam',
    minecraft: 'minecraft',
    paynow_name: 'paynow_name',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionExecutionStage = {
    on_purchase: 'on_purchase',
    on_expire: 'on_expire',
    on_refund: 'on_refund',
    on_chargeback: 'on_chargeback',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionRevocationStage = {
    on_expire: 'on_expire',
    on_refund: 'on_refund',
    on_chargeback: 'on_chargeback',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.DiscordActionType = {
    persist_role: 'persist_role',
    send_message: 'send_message',
    ban_user: 'ban_user',
    kick_user: 'kick_user',
    generate_invite_link: 'generate_invite_link',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.OrderStatus = {
    created: 'created',
    completed: 'completed',
    canceled: 'canceled',
    refunded: 'refunded',
    chargeback: 'chargeback',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.OrderType = {
    one_time: 'one_time',
    subscription: 'subscription',
    mixed: 'mixed',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.PayNowActorType = {
    anonymous: 'anonymous',
    user: 'user',
    customer: 'customer',
    api_key: 'api_key',
    game_server: 'game_server',
    admin: 'admin',
    internal: 'internal',
    platform: 'platform',
    global_customer: 'global_customer',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.PaymentDeclineCode = {
    unknown: 'unknown',
    generic_decline: 'generic_decline',
    call_issuer: 'call_issuer',
    authentication_required: 'authentication_required',
    currency_not_supported: 'currency_not_supported',
    duplicate_transaction: 'duplicate_transaction',
    expired_card: 'expired_card',
    fraudulent: 'fraudulent',
    incorrect_number: 'incorrect_number',
    incorrect_cvc: 'incorrect_cvc',
    incorrect_pin: 'incorrect_pin',
    incorrect_zip: 'incorrect_zip',
    insufficient_funds: 'insufficient_funds',
    invalid_account: 'invalid_account',
    invalid_amount: 'invalid_amount',
    invalid_expiry_month: 'invalid_expiry_month',
    invalid_expiry_year: 'invalid_expiry_year',
    issuer_not_available: 'issuer_not_available',
    lost_card: 'lost_card',
    merchant_blacklist: 'merchant_blacklist',
    new_account_information_available: 'new_account_information_available',
    no_action_taken: 'no_action_taken',
    pickup_card: 'pickup_card',
    pin_try_exceeded: 'pin_try_exceeded',
    restricted_card: 'restricted_card',
    stolen_card: 'stolen_card',
    testmode_decline: 'testmode_decline',
    try_again_later: 'try_again_later',
    security_violation: 'security_violation',
    card_velocity_exceeded: 'card_velocity_exceeded',
    do_not_honor: 'do_not_honor',
    processing_error: 'processing_error',
    card_not_supported: 'card_not_supported',
    transaction_not_allowed: 'transaction_not_allowed',
    authorization_revoked: 'authorization_revoked',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductCommandStage = {
    invalid: 'invalid',
    on_purchase: 'on_purchase',
    on_expire: 'on_expire',
    on_refund: 'on_refund',
    on_renew: 'on_renew',
    on_chargeback: 'on_chargeback',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductRemoveAfterIntervalScale = {
    invalid: 'invalid',
    day: 'day',
    week: 'week',
    month: 'month',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductStockTimeScale = {
    invalid: 'invalid',
    day: 'day',
    week: 'week',
    month: 'month',
    year: 'year',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductSubscriptionIntervalScale = {
    invalid: 'invalid',
    day: 'day',
    week: 'week',
    month: 'month',
    year: 'year',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.ProductTaxCode = {
    unknown: 'unknown',
    digital_goods_subscription: 'digital_goods_subscription',
    digital_goods_permanent: 'digital_goods_permanent',
    saas: 'saas',
    downloaded_software: 'downloaded_software',
    digital_goods_subscription_gaming: 'digital_goods_subscription_gaming',
    digital_goods_permanent_gaming: 'digital_goods_permanent_gaming',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.QueuedDiscordActionExecutionStatus = {
    success: 'success',
    failure: 'failure',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.QueuedDiscordActionStatus = {
    active: 'active',
    complete: 'complete',
    errored: 'errored',
    canceled: 'canceled',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.RefundStatus = {
    created: 'created',
    approved: 'approved',
    processing: 'processing',
    completed: 'completed',
    canceled: 'canceled',
    failed: 'failed',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.SubscriptionStatus = {
    created: 'created',
    active: 'active',
    canceled: 'canceled',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.TrustStoreOnboardingStatus = {
    invalid: 'invalid',
    pending: 'pending',
    approved: 'approved',
    declined: 'declined',
    requires_action: 'requires_action',
    under_review: 'under_review',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookEventType = {
    on_ignore: 'on_ignore',
    on_order_completed: 'on_order_completed',
    on_refund: 'on_refund',
    on_chargeback: 'on_chargeback',
    on_delivery_item_added: 'on_delivery_item_added',
    on_delivery_item_activated: 'on_delivery_item_activated',
    on_delivery_item_used: 'on_delivery_item_used',
    on_delivery_item_revoked: 'on_delivery_item_revoked',
    on_subscription_activated: 'on_subscription_activated',
    on_subscription_renewed: 'on_subscription_renewed',
    on_subscription_canceled: 'on_subscription_canceled',
    on_discord_order_actions_queued: 'on_discord_order_actions_queued',
    on_connected_user_registered: 'on_connected_user_registered',
    on_connected_user_became_payable: 'on_connected_user_became_payable',
    on_connected_user_payout_created: 'on_connected_user_payout_created',
    on_connected_user_payout_completed: 'on_connected_user_payout_completed',
    on_connected_user_transaction_inserted: 'on_connected_user_transaction_inserted',
    on_connected_user_became_unpayable: 'on_connected_user_became_unpayable',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookState = {
    success: 'success',
    pending: 'pending',
    failed: 'failed',
    all: 'all',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.WebhookType = {
    json_v1: 'json_v1',
    discord_v1: 'discord_v1',
};
const getAffiliateLinks = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links`, options);
};
exports.getAffiliateLinks = getAffiliateLinks;
const postAffiliateLink = (storeId, createAffiliateLinkDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links`, createAffiliateLinkDto, options);
};
exports.postAffiliateLink = postAffiliateLink;
const getAffiliateLink = (storeId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, options);
};
exports.getAffiliateLink = getAffiliateLink;
const patchAffiliateLink = (storeId, id, updateAffiliateLinkDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, updateAffiliateLinkDto, options);
};
exports.patchAffiliateLink = patchAffiliateLink;
const deleteAffiliateLink = (storeId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/affiliate-links/${id}`, options);
};
exports.deleteAffiliateLink = deleteAffiliateLink;
const getBans = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/bans`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getBans = getBans;
const postBan = (storeId, upsertBanRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/bans`, upsertBanRequestDto, options);
};
exports.postBan = postBan;
const getBan = (storeId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, options);
};
exports.getBan = getBan;
const patchBan = (storeId, id, upsertBanRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, upsertBanRequestDto, options);
};
exports.patchBan = patchBan;
const deleteBan = (storeId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/bans/${id}`, options);
};
exports.deleteBan = deleteBan;
const postBanCheck = (storeId, checkForBanIDByIdentitiesRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/bans/check`, checkForBanIDByIdentitiesRequestDto, options);
};
exports.postBanCheck = postBanCheck;
/**
 * Creates a checkout session from a secure server using an API Key.
If you have a Customer token, see the Storefront API Create Checkout endpoint.
 * @summary Create a checkout session
 */
const postCheckout = (storeId, createCheckoutSessionManagementDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/checkouts`, createCheckoutSessionManagementDto, options);
};
exports.postCheckout = postCheckout;
const postCoupon = (storeId, couponDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/coupons`, couponDto, options);
};
exports.postCoupon = postCoupon;
/**
 * @summary Fetches all coupons for a store id
 */
const getCoupons = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/coupons`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getCoupons = getCoupons;
/**
 * @summary Retrieves a coupon by ID
 */
const getCoupon = (storeId, couponId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, options);
};
exports.getCoupon = getCoupon;
/**
 * @summary Performs a Delta Update of a Coupon
 */
const patchCoupon = (storeId, couponId, couponDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, couponDto, options);
};
exports.patchCoupon = patchCoupon;
/**
 * @summary Deletes a coupon
 */
const deleteCoupon = (storeId, couponId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/coupons/${couponId}`, options);
};
exports.deleteCoupon = deleteCoupon;
/**
 * Creates a new custom variable for the specified store.
Custom variables allow customers to provide additional input when purchasing products.
 * @summary Create custom variable
 */
const postCustomVariable = (storeId, upsertCustomVariableRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables`, upsertCustomVariableRequestDto, options);
};
exports.postCustomVariable = postCustomVariable;
/**
 * Retrieves all custom variables for the specified store.
 * @summary Get custom variables
 */
const getCustomVariables = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables`, options);
};
exports.getCustomVariables = getCustomVariables;
/**
 * Retrieves a specific custom variable by ID from the specified store.
 * @summary Get custom variable
 */
const getCustomVariable = (storeId, customVariableId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, options);
};
exports.getCustomVariable = getCustomVariable;
/**
 * Performs a partial update of a custom variable using field mask.
Only the fields specified in the request will be updated.
 * @summary Update custom variable
 */
const patchCustomVariable = (storeId, customVariableId, upsertCustomVariableRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, upsertCustomVariableRequestDto, options);
};
exports.patchCustomVariable = patchCustomVariable;
/**
 * Deletes a custom variable from the specified store.
This will also delete all associated options and cannot be undone.
 * @summary Delete custom variable
 */
const deleteCustomVariable = (storeId, customVariableId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/custom-variables/${customVariableId}`, options);
};
exports.deleteCustomVariable = deleteCustomVariable;
/**
 * Retrieves all customers for the specified store.
 * @summary Get customers
 */
const getCustomers = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getCustomers = getCustomers;
/**
 * Creates a new customer based on the fields passed.
 * @summary Create customer
 */
const postCustomer = (storeId, upsertCustomerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers`, upsertCustomerRequestDto, options);
};
exports.postCustomer = postCustomer;
/**
 * Retrieves a customer by the ID for the specified store.
 * @summary Get customer by ID
 */
const getCustomer = (storeId, customerId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}`, options);
};
exports.getCustomer = getCustomer;
/**
 * Updates an existing customer based on the fields passed.
 * @summary Update customer
 */
const patchCustomer = (storeId, customerId, upsertCustomerRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}`, upsertCustomerRequestDto, options);
};
exports.patchCustomer = patchCustomer;
/**
 * Generates a customer token that can be used by the Storefront (Headless) API.
 * @summary Create customer token
 */
const postCustomerToken = (storeId, customerId, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}/tokens`, undefined, options);
};
exports.postCustomerToken = postCustomerToken;
/**
 * Invalidates all generated customer tokens.
 * @summary Invalidate customer tokens
 */
const deleteCustomerToken = (storeId, customerId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/customers/${customerId}/tokens`, options);
};
exports.deleteCustomerToken = deleteCustomerToken;
/**
 * Looks up a customer by an external platform ID.
 * @summary Lookup customer
 */
const getCustomerLookup = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/customers/lookup`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getCustomerLookup = getCustomerLookup;
/**
 * Creates up to 200 customers at once.
 * @summary Bulk create customers
 */
const postCustomerBulk = (storeId, upsertCustomerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/customers/bulk`, upsertCustomerRequestDto, options);
};
exports.postCustomerBulk = postCustomerBulk;
const getDataMigrations = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/data-migrations`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getDataMigrations = getDataMigrations;
const postDataMigrationTebex = (storeId, startDataMigrationFromTebexRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/data-migrations/tebex`, startDataMigrationFromTebexRequestDto, options);
};
exports.postDataMigrationTebex = postDataMigrationTebex;
const postDeliverableCommandsResend = (storeId, deliverableId, resendCommandsForGameServerRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/deliverables/${deliverableId}/commands/resend`, resendCommandsForGameServerRequestDto, options);
};
exports.postDeliverableCommandsResend = postDeliverableCommandsResend;
const getProductDownloadableFiles = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files`, options);
};
exports.getProductDownloadableFiles = getProductDownloadableFiles;
const postProductDownloadableFiles = (storeId, productId, startDownloadableFileUploadRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files`, startDownloadableFileUploadRequestDto, options);
};
exports.postProductDownloadableFiles = postProductDownloadableFiles;
const postProductDownloadableFileUploadFinish = (storeId, productId, id, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}/finish`, undefined, options);
};
exports.postProductDownloadableFileUploadFinish = postProductDownloadableFileUploadFinish;
const getProductDownloadableFileDownloadUrl = (storeId, productId, id, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}/download-url`, options);
};
exports.getProductDownloadableFileDownloadUrl = getProductDownloadableFileDownloadUrl;
const deleteProductDownloadableFile = (storeId, productId, id, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/downloadable-files/${id}`, options);
};
exports.deleteProductDownloadableFile = deleteProductDownloadableFile;
/**
 * Retrieves all global commands for the specified store.
 * @summary Get global commands
 */
const getGlobalCommands = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/global-commands`, options);
};
exports.getGlobalCommands = getGlobalCommands;
/**
 * Creates a global command for a store.
 * @summary Create global command
 */
const postGlobalCommand = (storeId, upsertGlobalCommandDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/global-commands`, upsertGlobalCommandDto, options);
};
exports.postGlobalCommand = postGlobalCommand;
/**
 * Updates a global command for a store.
 * @summary Update global command
 */
const patchGlobalCommand = (storeId, globalCommandId, upsertGlobalCommandDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/global-commands/${globalCommandId}`, upsertGlobalCommandDto, options);
};
exports.patchGlobalCommand = patchGlobalCommand;
/**
 * Deletes a global command for a store.
 * @summary Delete global command
 */
const deleteGlobalCommand = (storeId, globalCommandId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/global-commands/${globalCommandId}`, options);
};
exports.deleteGlobalCommand = deleteGlobalCommand;
/**
 * @summary Gets the abandoned checkout behaviour for a store
 */
const getAbandonedCheckoutConfiguration = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/marketing/abandoned-checkouts/configuration`, options);
};
exports.getAbandonedCheckoutConfiguration = getAbandonedCheckoutConfiguration;
/**
 * @summary Sets the abandoned checkout behaviour for a store
 */
const putAbandonedCheckoutConfiguration = (storeId, abandonedCheckoutStoreConfigurationUpdateDto, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/marketing/abandoned-checkouts/configuration`, abandonedCheckoutStoreConfigurationUpdateDto, options);
};
exports.putAbandonedCheckoutConfiguration = putAbandonedCheckoutConfiguration;
/**
 * @summary Gets the purchase follow up behaviour for a store
 */
const getPurchaseFollowUpsConfiguration = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/marketing/purchase-follow-ups/configuration`, options);
};
exports.getPurchaseFollowUpsConfiguration = getPurchaseFollowUpsConfiguration;
/**
 * @summary Sets the purchase follow up behaviour for a store
 */
const putPurchaseFollowUpsConfiguration = (storeId, purchaseFollowUpStoreConfigurationUpdateDto, options) => {
    return axios_1.default.put(`https://api.paynow.gg/v1/stores/${storeId}/marketing/purchase-follow-ups/configuration`, purchaseFollowUpStoreConfigurationUpdateDto, options);
};
exports.putPurchaseFollowUpsConfiguration = putPurchaseFollowUpsConfiguration;
/**
 * Retrieves all orders for the specified store.
 * @summary Get orders
 */
const getOrders = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getOrders = getOrders;
/**
 * Retrieves an order by the ID for the specified store.
 * @summary Get order by ID
 */
const getOrder = (storeId, orderId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}`, options);
};
exports.getOrder = getOrder;
/**
 * Creates a refund for an order by the ID for the specified store.
 * @summary Refund order by ID
 */
const postOrderRefund = (storeId, orderId, createRefundRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/orders/${orderId}/refund`, createRefundRequestDto, options);
};
exports.postOrderRefund = postOrderRefund;
/**
 * Retrieves all products for the specified store.
DO NOT USE THIS ROUTE FOR DISPLAYING PRODUCTS ON YOUR STOREFRONT, use the storefront API instead.
 * @summary Get products
 */
const getProducts = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products`, options);
};
exports.getProducts = getProducts;
/**
 * Creates a new product in the specified store.
Creating dynamic products while creating a checkout session via this endpoint without prior approval is prohibited and will result in store deactivation per our User Agreement.
 * @summary Create product
 */
const postProduct = (storeId, upsertProductRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products`, upsertProductRequestDto, options);
};
exports.postProduct = postProduct;
/**
 * Retrieves a specific product by ID from the specified store.
DO NOT USE THIS ROUTE FOR DISPLAYING PRODUCTS ON YOUR STOREFRONT, use the storefront API instead.
 * @summary Get product
 */
const getProduct = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, options);
};
exports.getProduct = getProduct;
/**
 * Updates an existing product in the specified store.
 * @summary Update product
 */
const patchProduct = (storeId, productId, upsertProductRequestDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, upsertProductRequestDto, options);
};
exports.patchProduct = patchProduct;
/**
 * Deletes a product from the specified store.
 * @summary Delete product
 */
const deleteProduct = (storeId, productId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}`, options);
};
exports.deleteProduct = deleteProduct;
/**
 * Updates the sort order of products in the specified store.
 * @summary Update product sort order
 */
const postProductSortOrder = (storeId, updateProductSortOrderRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/products/sort-order`, updateProductSortOrderRequestDto, options);
};
exports.postProductSortOrder = postProductSortOrder;
const getProductPricingRegions = (storeId, productId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/pricing/regions`, options);
};
exports.getProductPricingRegions = getProductPricingRegions;
const patchProductPricingRegion = (storeId, productId, regionId, productPricingRegionOverrideDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/${productId}/pricing/regions/${regionId}`, productPricingRegionOverrideDto, options);
};
exports.patchProductPricingRegion = patchProductPricingRegion;
const getPricingRegions = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/regions`, options);
};
exports.getPricingRegions = getPricingRegions;
const patchPricingRegion = (storeId, regionId, storePricingRegionOverrideDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/regions/${regionId}`, storePricingRegionOverrideDto, options);
};
exports.patchPricingRegion = patchPricingRegion;
const getPricingRegionGroups = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/products/pricing/region-groups`, options);
};
exports.getPricingRegionGroups = getPricingRegionGroups;
const getStoreTrustOnboarding = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/trust/onboarding/status`, options);
};
exports.getStoreTrustOnboarding = getStoreTrustOnboarding;
/**
 * Retrieves all subscriptions for the specified store.
 * @summary Get subscriptions
 */
const getSubscriptions = (storeId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getSubscriptions = getSubscriptions;
/**
 * Retrieves a subscription for the specified store by the supplied ID.
 * @summary Get subscription by ID
 */
const getSubscription = (storeId, subscriptionId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions/${subscriptionId}`, options);
};
exports.getSubscription = getSubscription;
/**
 * Cancels a subscription for the specified store by the supplied ID.
 * @summary Cancel subscription by ID
 */
const postSubscriptionCancel = (storeId, subscriptionId, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/subscriptions/${subscriptionId}/cancel`, undefined, options);
};
exports.postSubscriptionCancel = postSubscriptionCancel;
/**
 * Retrieves an image upload URL for a tag.
 * @summary Get tag image upload URL
 */
const getTagImageUploadUrl = (storeId, tagId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image-upload-url`, options);
};
exports.getTagImageUploadUrl = getTagImageUploadUrl;
/**
 * Finishes an image upload for a tag.
 * @summary Finish tag image upload URL
 */
const postTagImageUploadFinish = (storeId, tagId, finishTagImageUploadUrlRequestDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image-upload-finish`, finishTagImageUploadUrlRequestDto, options);
};
exports.postTagImageUploadFinish = postTagImageUploadFinish;
/**
 * Deletes an image for a tag.
 * @summary Delete tag image URL
 */
const deleteTagImage = (storeId, tagId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/tags/${tagId}/image`, options);
};
exports.deleteTagImage = deleteTagImage;
const getWebhooks = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks`, options);
};
exports.getWebhooks = getWebhooks;
const postWebhook = (storeId, createWebhookDto, options) => {
    return axios_1.default.post(`https://api.paynow.gg/v1/stores/${storeId}/webhooks`, createWebhookDto, options);
};
exports.postWebhook = postWebhook;
const getWebhookVariables = (storeId, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/variables`, options);
};
exports.getWebhookVariables = getWebhookVariables;
const patchWebhook = (storeId, webhookId, updateWebhookDto, options) => {
    return axios_1.default.patch(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}`, updateWebhookDto, options);
};
exports.patchWebhook = patchWebhook;
const deleteWebhook = (storeId, webhookId, options) => {
    return axios_1.default.delete(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}`, options);
};
exports.deleteWebhook = deleteWebhook;
const getWebhookHistory = (storeId, webhookId, params, options) => {
    return axios_1.default.get(`https://api.paynow.gg/v1/stores/${storeId}/webhooks/${webhookId}/history`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};
exports.getWebhookHistory = getWebhookHistory;
//# sourceMappingURL=management.js.map